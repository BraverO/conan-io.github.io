---
layout: post
comments: false
title: "OpenCV Conan package making off and future challenges"
description: "OpenCV conan packages are available in conan-center, but there are still things to be done"
---

### What is OpenCV?

If you're not familiar with OpenCV yet, check out our previous blog-post about [OpenCV 4.0.0](https://blog.conan.io/2018/12/19/New-OpenCV-release-4-0.html).
Given the fact OpenCV is a huge library with lots of features for various use-case, it's a good example to demonstrate some typical package challenges (and probably few more specific as well).

### OpenCV conan packages

Recently, we have finally accepted OpenCV recipe into [conan-center](https://bintray.com/conan-community/conan/opencv%3Aconan).
We support all major releases, so we have the following version available on bintray:

* 4.x - [opencv/4.0.1@conan/stable](https://bintray.com/conan-community/conan/opencv%3Aconan/4.0.1%3Astable)
* 3.x - [opencv/3.4.5@conan/stable](https://bintray.com/conan-community/conan/opencv%3Aconan/3.4.5%3Astable)
* 2.x - [opencv/2.4.13.5@conan/stable](https://bintray.com/conan-community/conan/opencv%3Aconan/2.4.13.5%3Astable)

Installation with conan should be pretty straightforward, e.g. you may use the following [conanfile.txt](https://docs.conan.io/en/latest/reference/conanfile_txt.html) to consume OpenCV 4.0.0:

{% highlight conf %}

[requires]
opencv/4.0.1@conan/stable

[generators]
cmake

{% endhighlight %}

As usual, pre-built packages are available for major platforms (Windows/Linux/MacOS) and compilers (Visual Studio/GCC/Clang).

### dependencies

OpenCV is a very complex library, and has lots of various dependencies. Current conan recipe has the following:

<p class="centered">
    <img  src="{{ site.url }}/assets/post_images/2019-01-21/opencv-deps.png"  align="center"
    width="800"  alt="dependencies of OpenCV 4.0.0 package"/>
</p>

A graph was generated by the [conan info](https://docs.conan.io/en/latest/reference/commands/consumer/info.html) command:

{% highlight bash %}

$ conan info opencv/4.0.0@conan/stable --graph opencv

{% endhighlight %}

As you can see, currently it mostly depends on image libraries, such as [libjpeg](http://libjpeg.sourceforge.net/), [libtiff](http://www.libtiff.org/), [libpng](http://www.libpng.org/pub/png/libpng.html), [libwepb](https://developers.google.com/speed/webp/), [jasper](http://www.ece.uvic.ca/~frodo/jasper/) and [OpenEXR](http://www.openexr.com/).

All these libraries are available as conan packages in [conan-center](https://bintray.com/conan-community/conan/opencv%3Aconan) as well.

These libraries are mainly needed by OpenCV [imgcodecs](https://docs.opencv.org/4.0.1/d4/da8/group__imgcodecs.html), to support reading and writing of various image formats.

All mentioned libraries might be enabled or disabled using conan options (They are currently enabled by default). For instance, to disable [OpenEXR](http://www.openexr.com/) support, use the following:

{% highlight conf %}

[requires]
opencv/4.0.1@conan/stable

[options]
opencv:openexr=False

[generators]
cmake

{% endhighlight %}

### OpenCV contrib

In addition to the built-in features, OpenCV has a collection of extra modules, called [OpenCV contrib](https://github.com/opencv/opencv_contrib). Currently, it has about 100 additional modules! Just o name a few:

* [Face Analysis](https://docs.opencv.org/4.0.1/db/d7c/group__face.html)
* [Optical Flow](https://docs.opencv.org/4.0.1/d2/d84/group__optflow.html)
* [Image Registration](https://docs.opencv.org/4.0.1/db/d61/group__reg.html)

By default, our package doesn't have OpenCV contrib modules enabled. But you may easily have them available by passing *opencv:contrib* option:

{% highlight conf %}

[requires]
opencv/4.0.1@conan/stable

[options]
opencv:contrib=True

[generators]
cmake

{% endhighlight %}

### Future: other options and dependencies

As stated previously, OpenCV is a very large and complex library, and it really has tons of options. And currently, our conan package doesn't support them all. You may check the list of available options on their [GitHub repository](https://github.com/opencv/opencv/blob/4.0.1/CMakeLists.txt#L208). It literally takes almost 300 lines of CMake code just to declare all these options! This is something that actually hard to model in one shot. Moreover, most of the options depend on other 3rd-party libraries.

Just a few examples:

* [Google Protocol Buffers](https://developers.google.com/protocol-buffers/) might be used to read data from [Caffe](http://caffe.berkeleyvision.org/) networks
* [OpenCL](https://www.khronos.org/opencl/) and [CUDA](https://developer.nvidia.com/cuda-zone) might be used to accelerate OpenCV algorithms on [heterogeneous systems](https://en.wikipedia.org/wiki/Heterogeneous_System_Architecture)
* [FFMPEG](https://github.com/bincrafters/conan-ffmpeg) and [GStreamer](https://gstreamer.freedesktop.org/) might be used to read and write video files

#### Google Protocol Buffers (Protobuf)

OpenCV module [DNN](https://docs.opencv.org/4.0.1/d6/d0f/group__dnn.html) (Deep Neural Network) may be compiled with [Google Protobuf](https://developers.google.com/protocol-buffers/) support.

We're currently actively working on adding Google Protobuf [recipe](https://github.com/bincrafters/conan-protobuf) accepted into [conan-center](https://bintray.com/conan-community/conan/opencv%3Aconan). The library is itself challenging, especially for the cross-compilation use case. As soon as it's accepted, we are going to enable our OpenCV package to use Protocol Buffers by default.

#### OpenCL

OpenCV may also be configured to use [OpenCL](https://www.khronos.org/opencl/), however, its support is very different across various platforms, for instance:

* MacOS has built-in OpenCL support by providing *OpenCL.framework*
* Linux needs installation of development packages (e.g. [ocl-icd-opencl-dev](https://packages.debian.org/stretch/ocl-icd-opencl-dev) on Debian systems)
* Windows needs SDK package provided by one of the vendors (e.g. from [Intel](https://software.intel.com/en-us/intel-opencl-support) or from [nVidia](https://developer.nvidia.com/cuda-toolkit))
* Android also needs SDK package from vendors (e.g. [Mali](https://developer.arm.com/products/software/mali-sdks))

Therefore, in order to provide OpenCL support for OpenCV package, we need to develop a way how to model such kind of dependency. Probably, we may decide to add a new feature to support so-called [virtual packages](https://www.debian.org/doc/manuals/debian-faq/ch-pkg_basics.en.html#s-virtual).

#### CUDA

Similar story to OpenCL, however, there is only one vendor, obviously - the building of the [CUDA](https://developer.nvidia.com/cuda-zone) applications requires [nVidia CUDA Toolkit](https://developer.nvidia.com/cuda-toolkit). The toolkit is pretty large, and contains CUDA compiler, in addition to libraries and headers. We either have to require user to have CUDA installed on the machine during the build, or provide a package for toolkit.

#### FFMPEG

It's common to use OpenCV not just for image processing, but for video processing as well, for example for watermarking, green screen replacement, etc. In order to enable OpenCV to read or write video files, [ffmpeg](https://www.ffmpeg.org/) library might be used by OpenCV [Video I/O](https://docs.opencv.org/4.0.1/d0/da7/videoio_overview.html) module. However, ffmpeg itself is probably equally complex to OpenCV (its [configure script](https://github.com/FFmpeg/FFmpeg/blob/master/configure#L65) has about 400 lines just to declare options available!), so its packaging is challenging as well. Hopefully, it will be available in [conan-center](https://bintray.com/conan-community/conan/opencv%3Aconan) in the near future, so OpenCV users will be able to capture and write video streams.

For instance, current [recipe](https://github.com/bincrafters/conan-ffmpeg) supports various encoding libraries (conan-packaged as well): [libx264](https://www.videolan.org/developers/x264.html), [libx265](http://x265.org/), [libvpx](https://www.webmproject.org/vp9/), [libopenh264](https://www.openh264.org/), etc. And we hope list will grow significantly, adding modern formats like [libaom](https://aomedia.googlesource.com/aom/) (also knowns as AV1).

Also, ffmpeg may use CUDA and OpenCL to accelerate video encoding and filtering as well, so it will also benefit from addressing CUDA and OpenCL support by conan.

#### GStreamer

We're currently working on packaging [GStramer](https://gstreamer.freedesktop.org/) libraries. Similarly to FFMPEG and Google Protobuf, GStreamer itself is pretty large, and requires few other libraries to be packaged first, such as [libffi](https://sourceware.org/libffi/) and [GLib](https://developer.gnome.org/glib/stable/). Along with FFMPEG, GStreamer is one of top-requested libraries to be packaged in conan, and it's obviously on our radar.


### Conclusion

Although OpenCV packages are available in [conan-center](https://bintray.com/conan-community/conan/opencv%3Aconan), they aren't complete in term of supported options and dependencies, and we are looking into adding more in small iterations, in order to satisfy more use-cases and support more features.

But we still encourage users to try our OpenCV packages, and report any issues and feature requests to our [GitHub](https://github.com/conan-community/community/issues). We will be adding missing pieces prioritizing them according to the feedback.
